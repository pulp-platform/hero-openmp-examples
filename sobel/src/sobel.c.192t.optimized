
;; Function rgbToGray._omp_fn.0 (rgbToGray._omp_fn.0, funcdef_no=31, decl_uid=6632, cgraph_uid=31, symbol_order=31)

Removing basic block 8
Removing basic block 9
Removing basic block 10
Removing basic block 11
rgbToGray._omp_fn.0 (struct .omp_data_s.1 & restrict .omp_data_i)
{
  unsigned int ivtmp.45;
  unsigned int ivtmp.39;
  int i;
  int q.3_2;
  int tt.4_3;
  int _8;
  int _9;
  int _10;
  int q.3_11;
  int tt.4_12;
  int q.3_13;
  int _14;
  int _16;
  unsigned char _25;
  int _26;
  double _27;
  double _28;
  unsigned char _31;
  int _32;
  double _33;
  double _34;
  double _35;
  unsigned char _38;
  int _39;
  double _40;
  double _41;
  double _42;
  unsigned char _43;
  unsigned int _75;
  byte * _76;
  sizetype _77;
  void * _78;
  void * _81;
  byte * _82;
  sizetype _83;
  byte * _87;
  sizetype _88;
  int _89;
  byte * restrict pretmp_93;
  byte * restrict pretmp_95;

  <bb 2>:
  # DEBUG i => 0
  _8 = *.omp_data_i_7(D).gray_size;
  _9 = omp_get_num_threads ();
  _10 = omp_get_thread_num ();
  q.3_11 = _8 / _9;
  tt.4_12 = _8 % _9;
  if (_10 < tt.4_12)
    goto <bb 7>;
  else
    goto <bb 3>;

  <bb 3>:
  # q.3_2 = PHI <q.3_13(7), q.3_11(2)>
  # tt.4_3 = PHI <0(7), tt.4_12(2)>
  _14 = q.3_2 * _10;
  i_15 = tt.4_3 + _14;
  _16 = q.3_2 + i_15;
  if (i_15 >= _16)
    goto <bb 4>;
  else
    goto <bb 5>;

  <bb 4>:
  return;

  <bb 5>:
  pretmp_93 = .omp_data_i_7(D)->gray;
  pretmp_95 = .omp_data_i_7(D)->rgb;
  _89 = i_15 * 3;
  _88 = (sizetype) _89;
  _87 = pretmp_95 + _88;
  ivtmp.39_90 = (unsigned int) _87;
  _83 = (sizetype) i_15;
  _82 = pretmp_93 + _83;
  ivtmp.45_84 = (unsigned int) _82;
  _77 = (sizetype) _16;
  _76 = pretmp_93 + _77;
  _75 = (unsigned int) _76;

  <bb 6>:
  # ivtmp.39_5 = PHI <ivtmp.39_90(5), ivtmp.39_91(6)>
  # ivtmp.45_86 = PHI <ivtmp.45_84(5), ivtmp.45_85(6)>
  # DEBUG i => (int) (ivtmp.45_86 - (unsigned int) pretmp_93)
  _81 = (void *) ivtmp.39_5;
  _25 = MEM[base: _81, offset: 0B];
  _26 = (int) _25;
  _27 = (double) _26;
  _28 = _27 * 2.99999999999999988897769753748434595763683319091796875e-1;
  _31 = MEM[base: _81, offset: 1B];
  _32 = (int) _31;
  _33 = (double) _32;
  _34 = _33 * 5.8999999999999996891375531049561686813831329345703125e-1;
  _35 = _28 + _34;
  _38 = MEM[base: _81, offset: 2B];
  _39 = (int) _38;
  _40 = (double) _39;
  _41 = _40 * 1.1000000000000000055511151231257827021181583404541015625e-1;
  _42 = _35 + _41;
  _43 = (unsigned char) _42;
  _78 = (void *) ivtmp.45_86;
  MEM[base: _78, offset: 0B] = _43;
  ivtmp.45_85 = ivtmp.45_86 + 1;
  # DEBUG i => (int) (ivtmp.45_85 - (unsigned int) pretmp_93)
  ivtmp.39_91 = ivtmp.39_5 + 3;
  if (_75 != ivtmp.45_85)
    goto <bb 6>;
  else
    goto <bb 4>;

  <bb 7>:
  q.3_13 = q.3_11 + 1;
  goto <bb 3>;

}



;; Function contour._omp_fn.2 (contour._omp_fn.2, funcdef_no=33, decl_uid=6856, cgraph_uid=37, symbol_order=37)

Removing basic block 8
Removing basic block 9
Removing basic block 10
Removing basic block 11
Removing basic block 12
contour._omp_fn.2 (struct .omp_data_s.21 & restrict .omp_data_i)
{
  int i;
  int q.23_2;
  int tt.24_3;
  int _8;
  int _9;
  int _10;
  int q.23_11;
  int tt.24_12;
  int q.23_13;
  int _14;
  int _16;
  double powmult_17;
  sizetype i.20_18;
  byte * _19;
  byte * _20;
  byte * _21;
  byte * _22;
  unsigned char _23;
  double _24;
  double powmult_25;
  byte * _27;
  byte * _28;
  unsigned char _29;
  double _30;
  double _33;
  double _35;
  unsigned char _36;

  <bb 2>:
  # DEBUG i => 0
  _8 = *.omp_data_i_7(D).gray_size;
  _9 = omp_get_num_threads ();
  _10 = omp_get_thread_num ();
  q.23_11 = _8 / _9;
  tt.24_12 = _8 % _9;
  if (_10 < tt.24_12)
    goto <bb 7>;
  else
    goto <bb 3>;

  <bb 3>:
  # q.23_2 = PHI <q.23_13(7), q.23_11(2)>
  # tt.24_3 = PHI <0(7), tt.24_12(2)>
  _14 = q.23_2 * _10;
  i_15 = tt.24_3 + _14;
  _16 = q.23_2 + i_15;
  if (i_15 >= _16)
    goto <bb 4>;
  else
    goto <bb 5>;

  <bb 4>:
  return;

  <bb 5>:
  # i_64 = PHI <i_15(3)>

  <bb 6>:
  # i_1 = PHI <i_64(5), i_38(6)>
  # DEBUG i => i_1
  i.20_18 = (sizetype) i_1;
  _19 = *.omp_data_i_7(D).contour_img;
  _20 = _19 + i.20_18;
  _21 = *.omp_data_i_7(D).sobel_h;
  _22 = _21 + i.20_18;
  _23 = *_22;
  _24 = (double) _23;
  powmult_17 = _24 * _24;
  _27 = *.omp_data_i_7(D).sobel_v;
  _28 = _27 + i.20_18;
  _29 = *_28;
  _30 = (double) _29;
  powmult_25 = _30 * _30;
  _33 = powmult_17 + powmult_25;
  _35 = sqrt (_33);
  _36 = (unsigned char) _35;
  *_20 = _36;
  i_38 = i_1 + 1;
  # DEBUG i => i_38
  if (_16 != i_38)
    goto <bb 6>;
  else
    goto <bb 4>;

  <bb 7>:
  q.23_13 = q.23_11 + 1;
  goto <bb 3>;

}



;; Function rgbToGray (rgbToGray, funcdef_no=25, decl_uid=6516, cgraph_uid=25, symbol_order=25)

rgbToGray (byte * restrict rgb, byte * restrict gray, int buffer_size)
{
  int gray_size;
  struct .omp_data_s.1 .omp_data_o.2;

  <bb 2>:
  gray_size_2 = buffer_size_1(D) / 3;
  # DEBUG gray_size => gray_size_2
  .omp_data_o.2.rgb = rgb_4(D);
  .omp_data_o.2.gray = gray_6(D);
  .omp_data_o.2.gray_size = gray_size_2;
  GOMP_parallel (rgbToGray._omp_fn.0, &.omp_data_o.2, 0, 0);
  # DEBUG D#2 => .omp_data_o.2.rgb
  # DEBUG rgb => D#2
  # DEBUG D#1 => .omp_data_o.2.gray
  # DEBUG gray => D#1
  gray_size_10 = .omp_data_o.2.gray_size;
  # DEBUG gray_size => gray_size_10
  .omp_data_o.2 ={v} {CLOBBER};
  return gray_size_10;

}



;; Function makeOpMem (makeOpMem, funcdef_no=26, decl_uid=6522, cgraph_uid=26, symbol_order=26)

Removing basic block 22
Removing basic block 23
Removing basic block 24
Removing basic block 25
Removing basic block 26
makeOpMem (byte * buffer, int buffer_size, int width, int cindex, byte * op_mem)
{
  sizetype pretmp_1;
  byte iftmp.6_2;
  byte iftmp.7_3;
  byte iftmp.8_4;
  byte iftmp.10_5;
  sizetype pretmp_6;
  byte iftmp.12_7;
  byte iftmp.13_8;
  int _11;
  _Bool _12;
  int _13;
  _Bool _15;
  int _16;
  _Bool _17;
  int _18;
  int _19;
  _Bool _20;
  sizetype _21;
  sizetype _22;
  byte * _24;
  byte iftmp.5_26;
  _Bool _27;
  byte * _31;
  byte iftmp.6_32;
  _Bool _34;
  sizetype _35;
  sizetype _36;
  byte * _37;
  byte iftmp.7_38;
  sizetype cindex.9_40;
  sizetype _41;
  byte * _42;
  byte iftmp.8_43;
  byte * _46;
  unsigned char _47;
  sizetype _49;
  byte * _50;
  byte iftmp.10_51;
  _Bool _53;
  sizetype _54;
  sizetype _55;
  byte * _56;
  byte iftmp.11_57;
  byte * _60;
  byte iftmp.12_61;
  _Bool _63;
  sizetype _64;
  sizetype _65;
  byte * _66;
  byte iftmp.13_67;
  sizetype pretmp_69;
  sizetype prephitmp_70;
  sizetype prephitmp_74;
  sizetype prephitmp_76;

  <bb 2>:
  _11 = cindex_9(D) - width_10(D);
  _12 = _11 < 0;
  # DEBUG bottom => (int) _12
  _13 = cindex_9(D) + width_10(D);
  _15 = _13 >= buffer_size_14(D);
  # DEBUG top => (int) _15
  _16 = cindex_9(D) % width_10(D);
  _17 = _16 == 0;
  # DEBUG left => (int) _17
  _18 = cindex_9(D) + 1;
  _19 = _18 % width_10(D);
  _20 = _19 == 0;
  # DEBUG right => (int) _20
  _27 = _12 | _17;
  if (_27 != 0)
    goto <bb 4>;
  else
    goto <bb 3>;

  <bb 3>:
  _21 = (sizetype) _11;
  _22 = _21 + 4294967295;
  _24 = buffer_23(D) + _22;
  iftmp.5_26 = *_24;
  *op_mem_28(D) = iftmp.5_26;
  goto <bb 6>;

  <bb 4>:
  *op_mem_28(D) = 0;
  if (_11 >= 0)
    goto <bb 5>;
  else
    goto <bb 7>;

  <bb 5>:
  pretmp_69 = (sizetype) _11;

  <bb 6>:
  # prephitmp_70 = PHI <pretmp_69(5), _21(3)>
  _31 = buffer_23(D) + prephitmp_70;
  iftmp.6_32 = *_31;

  <bb 7>:
  # iftmp.6_2 = PHI <iftmp.6_32(6), 0(4)>
  MEM[(byte *)op_mem_28(D) + 1B] = iftmp.6_2;
  _34 = _12 | _20;
  if (_34 != 0)
    goto <bb 9>;
  else
    goto <bb 8>;

  <bb 8>:
  _35 = (sizetype) _11;
  _36 = _35 + 1;
  _37 = buffer_23(D) + _36;
  iftmp.7_38 = *_37;

  <bb 9>:
  # iftmp.7_3 = PHI <iftmp.7_38(8), 0(7)>
  MEM[(byte *)op_mem_28(D) + 2B] = iftmp.7_3;
  if (_16 != 0)
    goto <bb 11>;
  else
    goto <bb 10>;

  <bb 10>:
  pretmp_1 = (sizetype) cindex_9(D);
  goto <bb 12>;

  <bb 11>:
  cindex.9_40 = (sizetype) cindex_9(D);
  _41 = cindex.9_40 + 4294967295;
  _42 = buffer_23(D) + _41;
  iftmp.8_43 = *_42;

  <bb 12>:
  # iftmp.8_4 = PHI <iftmp.8_43(11), 0(10)>
  # prephitmp_74 = PHI <cindex.9_40(11), pretmp_1(10)>
  MEM[(byte *)op_mem_28(D) + 3B] = iftmp.8_4;
  _46 = buffer_23(D) + prephitmp_74;
  _47 = *_46;
  MEM[(byte *)op_mem_28(D) + 4B] = _47;
  if (_19 != 0)
    goto <bb 13>;
  else
    goto <bb 14>;

  <bb 13>:
  _49 = prephitmp_74 + 1;
  _50 = buffer_23(D) + _49;
  iftmp.10_51 = *_50;

  <bb 14>:
  # iftmp.10_5 = PHI <iftmp.10_51(13), 0(12)>
  MEM[(byte *)op_mem_28(D) + 5B] = iftmp.10_5;
  _53 = _15 | _17;
  if (_53 != 0)
    goto <bb 16>;
  else
    goto <bb 15>;

  <bb 15>:
  _54 = (sizetype) _13;
  _55 = _54 + 4294967295;
  _56 = buffer_23(D) + _55;
  iftmp.11_57 = *_56;
  MEM[(byte *)op_mem_28(D) + 6B] = iftmp.11_57;
  goto <bb 18>;

  <bb 16>:
  MEM[(byte *)op_mem_28(D) + 6B] = 0;
  if (_13 < buffer_size_14(D))
    goto <bb 17>;
  else
    goto <bb 19>;

  <bb 17>:
  pretmp_6 = (sizetype) _13;

  <bb 18>:
  # prephitmp_76 = PHI <pretmp_6(17), _54(15)>
  _60 = buffer_23(D) + prephitmp_76;
  iftmp.12_61 = *_60;

  <bb 19>:
  # iftmp.12_7 = PHI <iftmp.12_61(18), 0(16)>
  MEM[(byte *)op_mem_28(D) + 7B] = iftmp.12_7;
  _63 = _15 | _20;
  if (_63 != 0)
    goto <bb 21>;
  else
    goto <bb 20>;

  <bb 20>:
  _64 = (sizetype) _13;
  _65 = _64 + 1;
  _66 = buffer_23(D) + _65;
  iftmp.13_67 = *_66;

  <bb 21>:
  # iftmp.13_8 = PHI <iftmp.13_67(20), 0(19)>
  MEM[(byte *)op_mem_28(D) + 8B] = iftmp.13_8;
  return;

}



;; Function itConv._omp_fn.1 (itConv._omp_fn.1, funcdef_no=32, decl_uid=6786, cgraph_uid=35, symbol_order=35)

Removing basic block 11
Removing basic block 12
Removing basic block 13
Removing basic block 14
Removing basic block 15
itConv._omp_fn.1 (struct .omp_data_s.16 & restrict .omp_data_i)
{
  unsigned int ivtmp.71;
  unsigned int ivtmp.66;
  int sum;
  int i;
  byte op_mem[9];
  int q.18_2;
  int tt.19_3;
  byte[9] * _8;
  int _10;
  int _11;
  int _12;
  int q.18_13;
  int tt.19_14;
  int q.18_15;
  int _16;
  int _18;
  int _20;
  byte * _22;
  sizetype i.15_24;
  byte * _25;
  byte * _26;
  int * _27;
  int _29;
  unsigned char _30;
  unsigned char _35;
  int _36;
  int _42;
  int _43;
  unsigned int _53;
  void * _54;
  void * _55;
  int * _58;
  int prephitmp_66;
  int pretmp_70;
  int prephitmp_71;

  <bb 2>:
  _8 = *.omp_data_i_7(D).op_mem;
  op_mem = *_8;
  # DEBUG i => 0
  _10 = *.omp_data_i_7(D).buffer_size;
  _11 = omp_get_num_threads ();
  _12 = omp_get_thread_num ();
  q.18_13 = _10 / _11;
  tt.19_14 = _10 % _11;
  if (_12 < tt.19_14)
    goto <bb 10>;
  else
    goto <bb 3>;

  <bb 3>:
  # q.18_2 = PHI <q.18_15(10), q.18_13(2)>
  # tt.19_3 = PHI <0(10), tt.19_14(2)>
  _16 = q.18_2 * _12;
  i_17 = tt.19_3 + _16;
  _18 = q.18_2 + i_17;
  if (i_17 >= _18)
    goto <bb 5>;
  else
    goto <bb 4>;

  <bb 4>:
  # i_68 = PHI <i_17(3)>
  # prephitmp_66 = PHI <_10(3)>
  goto <bb 6>;

  <bb 5>:
  return;

  <bb 6>:
  # i_1 = PHI <i_68(4), i_32(9)>
  # prephitmp_71 = PHI <prephitmp_66(4), pretmp_70(9)>
  # DEBUG i => i_1
  _20 = *.omp_data_i_7(D).width;
  _22 = *.omp_data_i_7(D).buffer;
  makeOpMem (_22, prephitmp_71, _20, i_1, &op_mem);
  i.15_24 = (sizetype) i_1;
  _25 = *.omp_data_i_7(D).res;
  _26 = _25 + i.15_24;
  _27 = *.omp_data_i_7(D).op;
  # DEBUG X => &op_mem
  # DEBUG Y => _27
  # DEBUG c_size => 9
  # DEBUG sum => 0
  # DEBUG i => 0
  # DEBUG i => 0
  # DEBUG sum => 0
  ivtmp.66_63 = (unsigned int) &MEM[(void *)&op_mem + 4294967295B];
  _58 = _27 + 36;
  ivtmp.71_59 = (unsigned int) _58;
  _53 = (unsigned int) _27;

  <bb 7>:
  # sum_56 = PHI <sum_45(7), 0(6)>
  # ivtmp.66_65 = PHI <ivtmp.66_64(7), ivtmp.66_63(6)>
  # ivtmp.71_61 = PHI <ivtmp.71_60(7), ivtmp.71_59(6)>
  # DEBUG i => (int) ((ivtmp.66_65 - (unsigned int) &op_mem) + 1)
  # DEBUG sum => sum_56
  ivtmp.66_64 = ivtmp.66_65 + 1;
  _55 = (void *) ivtmp.66_64;
  _35 = MEM[base: _55, offset: 0B];
  _36 = (int) _35;
  ivtmp.71_60 = ivtmp.71_61 + 4294967292;
  _54 = (void *) ivtmp.71_60;
  _42 = MEM[base: _54, offset: 0B];
  _43 = _36 * _42;
  sum_45 = _43 + sum_56;
  # DEBUG sum => sum_45
  # DEBUG D#14 => (int) ((ivtmp.66_64 - (unsigned int) &op_mem) + 1)
  # DEBUG i => D#14
  # DEBUG i => D#14
  # DEBUG sum => sum_45
  if (_53 != ivtmp.71_60)
    goto <bb 7>;
  else
    goto <bb 8>;

  <bb 8>:
  _29 = ABS_EXPR <sum_45>;
  _30 = (unsigned char) _29;
  *_26 = _30;
  i_32 = i_1 + 1;
  # DEBUG i => i_32
  if (_18 != i_32)
    goto <bb 9>;
  else
    goto <bb 5>;

  <bb 9>:
  pretmp_70 = .omp_data_i_7(D)->buffer_size;
  goto <bb 6>;

  <bb 10>:
  q.18_15 = q.18_13 + 1;
  goto <bb 3>;

}



;; Function convolution (convolution, funcdef_no=27, decl_uid=6526, cgraph_uid=27, symbol_order=27)

Removing basic block 6
Removing basic block 7
Removing basic block 8
convolution (byte * restrict X, int * restrict Y, int c_size)
{
  unsigned int ivtmp.95;
  unsigned int ivtmp.90;
  int sum;
  unsigned char _8;
  int _9;
  int _16;
  int _17;
  unsigned int _28;
  void * _29;
  void * _30;
  int * _31;
  sizetype _32;
  sizetype _33;
  byte * _37;

  <bb 2>:
  # DEBUG sum => 0
  # DEBUG i => 0
  # DEBUG i => 0
  # DEBUG sum => 0
  if (c_size_3(D) > 0)
    goto <bb 3>;
  else
    goto <bb 5>;

  <bb 3>:
  _37 = X_5(D) + 4294967295;
  ivtmp.90_38 = (unsigned int) _37;
  _33 = (sizetype) c_size_3(D);
  _32 = _33 * 4;
  _31 = Y_14(D) + _32;
  ivtmp.95_34 = (unsigned int) _31;
  _28 = (unsigned int) Y_14(D);

  <bb 4>:
  # sum_21 = PHI <0(3), sum_18(4)>
  # ivtmp.90_40 = PHI <ivtmp.90_38(3), ivtmp.90_39(4)>
  # ivtmp.95_36 = PHI <ivtmp.95_34(3), ivtmp.95_35(4)>
  # DEBUG i => (int) ((ivtmp.90_40 - (unsigned int) X_5(D)) + 1)
  # DEBUG sum => sum_21
  ivtmp.90_39 = ivtmp.90_40 + 1;
  _30 = (void *) ivtmp.90_39;
  _8 = MEM[base: _30, offset: 0B];
  _9 = (int) _8;
  ivtmp.95_35 = ivtmp.95_36 + 4294967292;
  _29 = (void *) ivtmp.95_35;
  _16 = MEM[base: _29, offset: 0B];
  _17 = _9 * _16;
  sum_18 = _17 + sum_21;
  # DEBUG sum => sum_18
  # DEBUG D#15 => (int) ((ivtmp.90_39 - (unsigned int) X_5(D)) + 1)
  # DEBUG i => D#15
  # DEBUG i => D#15
  # DEBUG sum => sum_18
  if (_28 != ivtmp.95_35)
    goto <bb 4>;
  else
    goto <bb 5>;

  <bb 5>:
  # sum_23 = PHI <sum_18(4), 0(2)>
  return sum_23;

}



;; Function itConv (itConv, funcdef_no=28, decl_uid=6532, cgraph_uid=28, symbol_order=28)

itConv (byte * buffer, int buffer_size, int width, int * op, byte * restrict res)
{
  byte op_mem[9];
  struct .omp_data_s.16 .omp_data_o.17;

  <bb 2>:
  memset (&op_mem, 0, 9);
  .omp_data_o.17.op_mem = &op_mem;
  .omp_data_o.17.buffer = buffer_4(D);
  .omp_data_o.17.buffer_size = buffer_size_6(D);
  .omp_data_o.17.width = width_8(D);
  .omp_data_o.17.op = op_10(D);
  .omp_data_o.17.res = res_12(D);
  GOMP_parallel (itConv._omp_fn.1, &.omp_data_o.17, 0, 0);
  # DEBUG D#7 => .omp_data_o.17.buffer
  # DEBUG buffer => D#7
  # DEBUG D#6 => .omp_data_o.17.buffer_size
  # DEBUG buffer_size => D#6
  # DEBUG D#5 => .omp_data_o.17.width
  # DEBUG width => D#5
  # DEBUG D#4 => .omp_data_o.17.op
  # DEBUG op => D#4
  # DEBUG D#3 => .omp_data_o.17.res
  # DEBUG res => D#3
  .omp_data_o.17 ={v} {CLOBBER};
  op_mem ={v} {CLOBBER};
  return;

}



;; Function contour (contour, funcdef_no=29, decl_uid=6537, cgraph_uid=29, symbol_order=29)

contour (byte * restrict sobel_h, byte * restrict sobel_v, int gray_size, byte * restrict contour_img)
{
  struct .omp_data_s.21 .omp_data_o.22;

  <bb 2>:
  .omp_data_o.22.sobel_h = sobel_h_2(D);
  .omp_data_o.22.sobel_v = sobel_v_4(D);
  .omp_data_o.22.gray_size = gray_size_6(D);
  .omp_data_o.22.contour_img = contour_img_8(D);
  GOMP_parallel (contour._omp_fn.2, &.omp_data_o.22, 0, 0);
  # DEBUG D#11 => .omp_data_o.22.sobel_h
  # DEBUG sobel_h => D#11
  # DEBUG D#10 => .omp_data_o.22.sobel_v
  # DEBUG sobel_v => D#10
  # DEBUG D#9 => .omp_data_o.22.gray_size
  # DEBUG gray_size => D#9
  # DEBUG D#8 => .omp_data_o.22.contour_img
  # DEBUG contour_img => D#8
  .omp_data_o.22 ={v} {CLOBBER};
  return;

}



;; Function sobelFilter (sobelFilter, funcdef_no=30, decl_uid=6545, cgraph_uid=30, symbol_order=30)

sobelFilter (byte * rgb, byte * gray, byte * sobel_h_res, byte * sobel_v_res, byte * contour_img, int width, int height)
{
  struct .omp_data_s.1 .omp_data_o.2;
  struct .omp_data_s.21 .omp_data_o.22;
  int gray_size;
  int sobel_v[9];
  int sobel_h[9];
  int _6;

  <bb 2>:
  sobel_h = *.LC0;
  sobel_v = *.LC1;
  _6 = width_4(D) * height_5(D);
  # DEBUG D#12 => _6 * 3
  # DEBUG rgb_size => D#12
  # DEBUG rgb => rgb_7(D)
  # DEBUG gray => gray_8(D)
  # DEBUG buffer_size => D#12
  # DEBUG gray_size => _6
  .omp_data_o.2.rgb = rgb_7(D);
  .omp_data_o.2.gray = gray_8(D);
  .omp_data_o.2.gray_size = _6;
  GOMP_parallel (rgbToGray._omp_fn.0, &.omp_data_o.2, 0, 0);
  # DEBUG D#2 => .omp_data_o.2.rgb
  # DEBUG rgb => D#2
  # DEBUG D#1 => .omp_data_o.2.gray
  # DEBUG gray => D#1
  gray_size_17 = .omp_data_o.2.gray_size;
  # DEBUG gray_size => gray_size_17
  .omp_data_o.2 ={v} {CLOBBER};
  # DEBUG gray_size => NULL
  itConv (gray_8(D), gray_size_17, width_4(D), &sobel_h, sobel_h_res_10(D));
  itConv (gray_8(D), gray_size_17, width_4(D), &sobel_v, sobel_v_res_12(D));
  # DEBUG sobel_h => sobel_h_res_10(D)
  # DEBUG sobel_v => sobel_v_res_12(D)
  # DEBUG gray_size => NULL
  # DEBUG contour_img => contour_img_14(D)
  .omp_data_o.22.sobel_h = sobel_h_res_10(D);
  .omp_data_o.22.sobel_v = sobel_v_res_12(D);
  .omp_data_o.22.gray_size = gray_size_17;
  .omp_data_o.22.contour_img = contour_img_14(D);
  GOMP_parallel (contour._omp_fn.2, &.omp_data_o.22, 0, 0);
  # DEBUG D#11 => .omp_data_o.22.sobel_h
  # DEBUG sobel_h => D#11
  # DEBUG D#10 => .omp_data_o.22.sobel_v
  # DEBUG sobel_v => D#10
  # DEBUG D#9 => .omp_data_o.22.gray_size
  # DEBUG gray_size => D#9
  # DEBUG D#8 => .omp_data_o.22.contour_img
  # DEBUG contour_img => D#8
  .omp_data_o.22 ={v} {CLOBBER};
  sobel_h ={v} {CLOBBER};
  sobel_v ={v} {CLOBBER};
  return gray_size_17;

}


